(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, global.NicePassWord = factory());
})(this, function() {
  "use strict";
  function NicePassWord(input) {
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$type = _ref.type, type = _ref$type === void 0 ? "password" : _ref$type, _ref$symbol = _ref.symbol, symbol = _ref$symbol === void 0 ? "*" : _ref$symbol, _ref$callback = _ref.callback, callback = _ref$callback === void 0 ? function() {
    } : _ref$callback, _ref$pattern = _ref.pattern, pattern = _ref$pattern === void 0 ? /([\u4e00-\u9fa5])/g : _ref$pattern;
    var _this = this;
    if (typeof input === "string") {
      _this.input = document.getElementById(input.indexOf("#") === 0 ? input.substr(1) : input);
    } else {
      _this.input = input;
    }
    if (!_this.input || !_this.input.tagName || _this.input.tagName.toLowerCase() != "input" || _this.input.type === "password") {
      throw new Error("请传一个type为text的input的id或HTMLInputElement！");
    }
    _this.input.valueProxy = "";
    _this.callback = callback;
    _this.type = type;
    _this.symbol = symbol;
    _this.symbolRegExp = new RegExp(_this.symbol.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "g");
    _this.pattern = pattern;
    _this.cursor = 0;
    _this.isInit = false;
    Object.defineProperty(_this, "value", {
      get: function get() {
        return _this.input.valueProxy;
      }
    });
    _this.init();
    return _this;
  }
  NicePassWord.prototype.init = function() {
    this.$setValue();
    this._preventDefaultEvent();
    this._bindEvent();
    this.isInit = true;
  };
  NicePassWord.prototype._preventDefaultEvent = function(e) {
    function _preventDefaultHandler() {
      var e2 = e2 || window.event;
      e2.preventDefault();
    }
    function _mousedownHandler(e2) {
      if (e2.button === 0 && this.selectionStart != this.selectionEnd) {
        this.selectionStart = this.selectionEnd = this.value.length;
      }
      return false;
    }
    function _dragleaveHandler(e2) {
      e2.preventDefault();
      this.warn("_dragleaveHandler");
      this.removeAttribute("readonly");
      return false;
    }
    function _dragenterhandlder(e2) {
      e2.preventDefault();
      this.warn("_dragenterhandlder");
      this.setAttribute("readonly", true);
      return false;
    }
    this.input.addEventListener("copy", _preventDefaultHandler);
    this.input.addEventListener("cut", _preventDefaultHandler);
    this.input.addEventListener("dragenter", _dragenterhandlder);
    this.input.addEventListener("dragleave", _dragleaveHandler);
    this.input.addEventListener("mousedown", _mousedownHandler);
  };
  NicePassWord.prototype._bindEvent = function() {
    var _this2 = this;
    this.input.addEventListener("compositionstart", function() {
      _this2.lock = true;
      _this2.warn("start");
    });
    this.input.addEventListener("compositionend", function() {
      _this2.lock = false;
      _this2.warn("end");
      _this2._inputHandler();
    });
    this.input.addEventListener("input", this._inputHandler.bind(this));
    this.input.addEventListener("propertychange", this._inputHandler.bind(this));
  };
  NicePassWord.prototype._inputHandler = function() {
    if (this.lock) return;
    if (!this.isInit) {
      this.warn("init");
    } else {
      this.warn("input");
    }
    if (this.type === "password") {
      this._passwordHandler();
    } else {
      this._textHandler();
    }
    this._showValue();
    this._setCursor();
    typeof this.callback == "function" && this.callback();
  };
  NicePassWord.prototype._passwordHandler = function() {
    var _this = this, cvalueArr = this._filterCn(this.input.value).split(""), ovalueArr = this.input.valueProxy.split(""), clen = cvalueArr.length - ovalueArr.length, cursor = this.input.selectionStart, ccursor = cursor - this.input.value.split("").length + cvalueArr.length;
    if (clen > 0) {
      var inArr = cvalueArr.join("").replace(this.symbolRegExp, "").split("");
      var right = cvalueArr.length - cursor > 0 ? ovalueArr.slice(-(cvalueArr.length - cursor)) : [];
      ovalueArr = [].concat(ovalueArr.slice(0, cursor - inArr.length), inArr, right);
      console.log(inArr, this.symbolRegExp);
    }
    if (clen < 0) {
      ovalueArr.splice(cursor, Math.abs(clen));
    }
    cvalueArr.forEach(function(value, index) {
      if (value != _this.symbol) {
        ovalueArr[index] = value;
      }
    });
    this.input.valueProxy = ovalueArr.join("");
    this.cursor = ccursor;
  };
  NicePassWord.prototype._filterCn = function _filterCn(str, repStr) {
    if (!str) return str;
    var pattern = this.pattern, repStr = repStr ? repStr : "";
    return str.replace(pattern, repStr);
  };
  NicePassWord.prototype._textHandler = function() {
    this.input.valueProxy = this._filterCn(this.input.value);
    this.cursor = this.input.selectionStart - this.input.value.split("").length + this.input.valueProxy.split("").length;
  };
  NicePassWord.prototype._showValue = function() {
    var _this3 = this;
    var str = "";
    if (this.type === "password") {
      this.value.split("").forEach(function(val) {
        str += _this3.symbol;
      });
    } else {
      str = this.value;
    }
    this.input.value = str;
  };
  NicePassWord.prototype._setCursor = function() {
    this.input.selectionStart = this.cursor;
    this.input.selectionEnd = this.cursor;
  };
  NicePassWord.prototype.warn = function(msg) {
    console.log(msg);
  };
  NicePassWord.prototype.$setValue = function(value) {
    if (value) this.input.value = value;
    this._inputHandler();
  };
  NicePassWord.prototype.$changeType = function(type) {
    this.type = type;
    this.$setValue(this.value);
  };
  return NicePassWord;
});
